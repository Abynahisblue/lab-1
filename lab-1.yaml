AWSTemplateFormatVersion: '2010-09-09'
Description: Creates IAM users with specific permissions and automates password logging.

Parameters:
  AdminEmail:
    Type: String
    Description: Email address where notifications can be sent.
  S3ReadAccessPolicyName:
    Type: String
    Default: S3ReadAccessPolicy
    Description: Name for the S3 read-only policy.
  EC2ReadAccessPolicyName:
    Type: String
    Default: EC2ReadAccessPolicy
    Description: Name for the EC2 read-only policy.
  TemporaryPasswordSecretName:
    Type: String
    Default: TemporaryUserPassword
    Description: Name of the Secrets Manager secret for the temporary password.
  UserEmailPrefix:
    Type: String
    Default: user
    Description: Prefix for the user email stored in Parameter Store.

Resources:
  # 1. One-Time Password in Secrets Manager
  TemporaryPasswordSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: Temporary password for new IAM users
      GenerateSecretString:
        PasswordLength: 16
        ExcludeCharacters: '"@/\'
        RequireEachIncludedType: true

  # 2. S3 User Group with Read Access
  S3UserGroup:
    Type: AWS::IAM::Group
    Properties:
      GroupName: S3ReadOnlyGroup
      Policies:
        - PolicyName: !Ref S3ReadAccessPolicyName
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                Resource: "*"

  # 3. EC2 User Group with Read Access
  EC2UserGroup:
    Type: AWS::IAM::Group
    Properties:
      GroupName: EC2ReadOnlyGroup
      Policies:
        - PolicyName: !Ref EC2ReadAccessPolicyName
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeInstances
                  - ec2:DescribeRegions
                  - ec2:DescribeAvailabilityZones
                Resource: "*"

  # 4. IAM User: ec2-user
  EC2User:
    Type: AWS::IAM::User
    Properties:
      UserName: ec2-user
      Groups:
        - !Ref EC2UserGroup
      Password: !GetAtt TemporaryPasswordSecret.SecretString
      PasswordResetRequired: true
      Tags:
        - Key: Email
          Value: !Sub "${UserEmailPrefix}-ec2@example.com"

  # Store ec2-user email in Parameter Store
  EC2UserEmailParam:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/users/ec2-user/email"
      Type: String
      Value: !GetAtt EC2User.Tags.0.Value

  # 4. IAM User: s3-user
  S3User:
    Type: AWS::IAM::User
    Properties:
      UserName: s3-user
      Groups:
        - !Ref S3UserGroup
      Password: !GetAtt TemporaryPasswordSecret.SecretString
      PasswordResetRequired: true
      Tags:
        - Key: Email
          Value: !Sub "${UserEmailPrefix}-s3@example.com"

  # Store s3-user email in Parameter Store
  S3UserEmailParam:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/users/s3-user/email"
      Type: String
      Value: !GetAtt S3User.Tags.0.Value

  # 5. Lambda Function to Log User Info (Java)
  LogNewUserFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: example.Handler
      Role: !GetAtt LogNewUserRole.Arn
      Runtime: java11
      Code:
        ZipFile: |
          package example;

          import com.amazonaws.services.lambda.runtime.Context;
          import com.amazonaws.services.lambda.runtime.RequestHandler;
          import com.amazonaws.services.lambda.runtime.events.AwsEventBridgeEvent;
          import software.amazon.awssdk.regions.Region;
          import software.amazon.awssdk.services.secretsmanager.SecretsManagerClient;
          import software.amazon.awssdk.services.secretsmanager.model.GetSecretValueRequest;
          import software.amazon.awssdk.services.secretsmanager.model.GetSecretValueResponse;
          import software.amazon.awssdk.services.ssm.SsmClient;
          import software.amazon.awssdk.services.ssm.model.GetParameterRequest;
          import software.amazon.awssdk.services.ssm.model.GetParameterResponse;
          import java.util.Map;

          public class Handler implements RequestHandler<AwsEventBridgeEvent<Map<String, Object>>, String> {
            
              @Override
              public String handleRequest(AwsEventBridgeEvent<Map<String, Object>> event, Context context) {
                  if ("AWS API Call via CloudTrail".equals(event.getDetailType())) {
                      Map<String, Object> detail = event.getDetail();
                      if ("CreateUser".equals(detail.get("eventName"))) {
                          Map<String, Object> requestParams = (Map<String, Object>) detail.get("requestParameters");
                          if (requestParams != null) {
                              String userName = (String) requestParams.get("userName");
                              try {
                                  // Get region from environment variable
                                  Region region = Region.of(System.getenv("AWS_REGION"));
                                  
                                  // Get temporary password from Secrets Manager
                                  SecretsManagerClient secretsClient = SecretsManagerClient.builder()
                                      .region(region)
                                      .build();
                                  
                                  GetSecretValueRequest secretRequest = GetSecretValueRequest.builder()
                                      .secretId(System.getenv("TEMP_PASSWORD_SECRET_NAME"))
                                      .build();
                                  
                                  GetSecretValueResponse secretResponse = secretsClient.getSecretValue(secretRequest);
                                  String temporaryPassword = secretResponse.secretString();
                                  
                                  // Get user email from Parameter Store
                                  SsmClient ssmClient = SsmClient.builder()
                                      .region(region)
                                      .build();
                                  
                                  GetParameterRequest paramRequest = GetParameterRequest.builder()
                                      .name(String.format("/users/%s/email", userName))
                                      .build();
                                  
                                  GetParameterResponse paramResponse = ssmClient.getParameter(paramRequest);
                                  String userEmail = paramResponse.parameter().value();
                                  
                                  // Log user information
                                  context.getLogger().log(String.format(
                                      "New User Created: %s, Email: %s, Temporary Password: %s",
                                      userName, userEmail, temporaryPassword));
                                  
                              } catch (Exception e) {
                                  context.getLogger().log("Error retrieving user info: " + e.getMessage());
                                  e.printStackTrace();
                              }
                          }
                      }
                  }
                  return "Function executed successfully!";
              }
          }
      Timeout: 30
      MemorySize: 512
      Environment:
        Variables:
          TEMP_PASSWORD_SECRET_NAME: !Ref TemporaryPasswordSecretName
          AWS_REGION: !Ref AWS::Region

  # IAM Role for Lambda Function
  LogNewUserRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: LogNewUserInfoPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Ref TemporaryPasswordSecret
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                Resource: arn:aws:ssm:*:*:parameter/users/*

  # 6. EventBridge Rule
  NewUserEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: NewIAMUserCreated
      EventPattern:
        Source:
          - aws.iam
        DetailType:
          - AWS API Call via CloudTrail
        Detail:
          eventSource:
            - iam.amazonaws.com
          eventName:
            - CreateUser
      Targets:
        - Id: LogNewUserTarget
          Arn: !GetAtt LogNewUserFunction.Arn